schema.file=/etltest/deltaloadcmd/cfg/spc.schema
vars=groupfun
groupfun=Java.type('etl.util.GroupFun')
tables=SPC_WIFIACTIVESUBS_LOG,SPC_TOKENS_LOG,SPC_SUBSCRIBERS_LOG,SPC_DEVICE_ENTITLEMENTS_LOG,SPC_IMS_PRIDS_LOG,SPC_METOKEN_LOG
table.key=Table
default.value=blank
table.wildcard=_LOG
tablename.setfilename=true
tablename.mapping.exp=originTableName+\"_LOG\"
#SPC_TOKENS.setWhenExist=SPC_DATE:SPC_TIMESTAMP:"2012-01-01"
#SPC_TOKENS.setWhenExist=SPC_TIME:SPC_TIMESTAMP:record.SPC_DATE
#SPC_TOKENS.setWhenExist=SPC_TIME:SPC_TIMESTAMP:groupfun.convertTimeStampToString(record.EventTimestamp\,'YYYY-MM-dd HH:mm:ss'\,'GMT')
table.common.setWhenExist=EVENT_TIMESTAMP:EventTimestamp:groupfun.convertTimeStampToString(record.EventTimestamp\,'YYYY-MM-dd HH:mm:ss'\,'GMT')
table.common.setWhenExist=EVENT_DATE:EventTimestamp:groupfun.convertTimeStampToString(record.EventTimestamp\,'YYYY-MM-dd'\,'GMT')
table.common.setWhenExist=EVENT_TIME:EventTimestamp:groupfun.convertTimeStampToString(record.EventTimestamp\,'HH:mm:ss'\,'GMT')
table.common.setWhenExist=TABLE_NAME:Table:record.Table
table.common.setWhenExist=OPERATION:Operation:record.Operation
SPC_TOKENS_LOG.setWhenExist=SPC_FULLAUTHTIMESTAMP:SPC_FULLAUTHTIMESTAMP:groupfun.convertTimeStampToString(record.SPC_FULLAUTHTIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT')
SPC_TOKENS_LOG.setWhenExist=SPC_EVENTTIMESTAMP:SPC_EVENTTIMESTAMP:groupFun.convertTimeStampToString(record.SPC_EVENTTIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_TOKENS_LOG.setWhenExist=SPC_ST_TIMESTAMP:SPC_ST_TIMESTAMP:groupFun.convertTimeStampToString(record.SPC_ST_TIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_TOKENS_LOG.setWhenExist=SPC_VOLTEOOBTIMESTAMP:SPC_VOLTEOOBTIMESTAMP:groupFun.convertTimeStampToString(record.SPC_VOLTEOOBTIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_DEVICE_ENTITLEMENTS_LOG.setWhenExist=SPC_REG_LOC_TIMESTAMP:SPC_REG_LOC_TIMESTAMP:groupFun.convertTimeStampToString(record.SPC_REG_LOC_TIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_IMS_PRIDS_LOG.setWhenExist=SPC_PRID_UPDATE_TIME:SPC_PRID_UPDATE_TIME:groupFun.convertTimeStampToString(record.SPC_PRID_UPDATE_TIME\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_IMS_PRIDS_LOG.setWhenExist=SPC_PRID_CREATION_TIME:SPC_PRID_CREATION_TIME:groupFun.convertTimeStampToString(record.SPC_PRID_CREATION_TIME\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_WIFIACTIVESUBS_LOG.setWhenExist=SPC_WIFIASAUTHTIMESTAMP:SPC_WIFIASAUTHTIMESTAMP:groupFun.convertTimeStampToString(record.SPC_WIFIASAUTHTIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_SUBSCRIBERS_LOG.setWhenExist=SPC_PROVTIME:SPC_PROVTIME:groupFun.convertTimeStampToString(record.SPC_PROVTIME\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_SUBSCRIBERS_LOG.setWhenExist=SPC_PROVCHANGETIME:SPC_PROVCHANGETIME:groupFun.convertTimeStampToString(record.SPC_PROVCHANGETIME\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_SUBSCRIBERS_LOG.setWhenExist=SPC_LASTUPDATE:SPC_LASTUPDATE:groupFun.convertTimeStampToString(record.SPC_LASTUPDATE\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_METOKEN_LOG.setWhenExist=SPC_MTFULLAUTHTS:SPC_MTFULLAUTHTS:groupFun.convertTimeStampToString(record.SPC_MTFULLAUTHTS\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_METOKEN_LOG.setWhenExist=SPC_MTAUTHTS:SPC_MTAUTHTS:groupFun.convertTimeStampToString(record.SPC_MTAUTHTS\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_METOKEN_LOG.setWhenExist=SPC_MTDEACTTS:SPC_MTDEACTTS:groupFun.convertTimeStampToString(record.SPC_MTDEACTTS\,'YYYY-MM-dd HH:mm:ss'\,'GMT');
SPC_METOKEN_LOG.setWhenExist=SPC_E911_TIMESTAMP:SPC_E911_TIMESTAMP:groupFun.convertTimeStampToString(record.SPC_E911_TIMESTAMP\,'YYYY-MM-dd HH:mm:ss'\,'GMT');